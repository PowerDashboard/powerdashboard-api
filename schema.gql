# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AppInstance {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  appId: String!
  appVersion: String!
  config: String!
  user: User!
  slides: [Slide!]
}

type BaseEntity {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type File {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  filename: String!
  mimeType: String!
  sizeKilobytes: Int!
  user: User!
  keys: [FileKey!]
  link: FileLink!
}

type FileKey {
  id: ID!
  createdAt: DateTime!
  key: String!
  file: File!
  user: User!
}

input FileKeyInput {
  id: String!
  key: String!
}

type FileLink {
  url: String!
  expiryTime: Float!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
  recaptcha: String!
}

type Mutation {
  addUser(newUserData: NewUserInput!): User!
  updateUser(updateUserData: UpdateUserInput!, id: Int!): User!
  deleteUser(password: String!, id: Int!): Boolean!
  login(loginData: LoginInput!): TokenResponse!
  refreshToken: TokenResponse
  revokeToken: Boolean!
  addRole(newRoleData: NewRoleInput!): Role!
  updateRole(updateRoleData: UpdateRoleInput!, id: Int!): Role!
  deleteRole(id: Int!): Boolean!
  addOrganization(newOrganizationData: NewOrganizationInput!): Organization!
  updateOrganization(updateOrganizationData: UpdateOrganizationInput!, id: Int!): Organization!
  deleteOrganization(id: Int!): Boolean!
  addAppInstance(newAppInstanceData: NewAppInstanceInput!): AppInstance!
  updateAppInstance(updateAppInstanceData: UpdateAppInstanceInput!, id: Int!): AppInstance!
  deleteAppInstance(id: Int!): Boolean!
  addSlide(newSlideData: NewSlideInput!): Slide!
  updateSlide(updateSlideData: UpdateSlideInput!, id: Int!): Slide!
  deleteSlide(id: Int!): Boolean!
  addScreen(newScreenData: NewScreenInput!): Screen!
  updateScreen(updateScreenData: UpdateScreenInput!, id: Int!): Screen!
  deleteScreen(id: Int!): Boolean!
  addFile(newFileData: NewFileInput!): File
  updateFile(updateFileData: UpdateFileInput!, id: Int!): File
  deleteFile(id: Int!): Boolean!
  fileLink(id: Int!): FileLink!
  addFileKey(fileId: Int!): FileKey!
  deleteFileKey(id: String!): Boolean!
  addScreenKey(privateKey: String!, screenId: Int!): ScreenKey!
  deleteScreenKey(id: Int!): Boolean!
}

input NewAppInstanceInput {
  title: String!
  appId: String!
  appVersion: String!
  config: String!
}

input NewFileInput {
  title: String!
  file: Upload!
}

input NewOrganizationInput {
  title: String!
}

input NewRoleInput {
  permissionType: PermissionType!
  userId: Int!
  organizationId: Int!
}

input NewScreenInput {
  title: String!
  color: String!
  ratio: String!
  organizationId: Int!
}

input NewSlideInput {
  durationSeconds: Int!
  transition: JSON
  time: JSON
  date: JSON
  weekdays: JSON!
  appInstanceId: Int
  screenId: Int!
}

input NewUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  rulesAccepted: Boolean!
  picture: Upload
  recaptcha: String!
}

type Organization {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  viewerPermissionType: String!
  roles: [Role!]
  screens: [Screen!]
}

enum PermissionType {
  Admin
  Editor
}

enum PredefinedQuotesType {
  Motivational
  Business
}

type Query {
  viewer: User!
  userByEmail(email: String!): User!
  organization(id: Int!): Organization!
  appInstance(id: Int!): AppInstance!
  appInstancesByAppId(appId: String!): [AppInstance!]!
  screen(id: Int!): Screen!
  fileKey(fileKey: FileKeyInput!): FileKey!
  calendarTodayDayNames: String!
  calendarTodayHoliday: String!
  quotePredefinedQuotes(type: PredefinedQuotesType!): [Quote!]!
  screenByKey(screenKey: ScreenKeyInput!): Screen!
}

type Quote {
  id: String!
  content: String!
  author: String!
}

type Role {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  permissionType: PermissionType!
  user: User!
  organization: Organization!
}

type Screen {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  isActive: Boolean!
  color: String!
  ratio: String!
  publicKey: String!
  slidesOrder: JSON!
  organization: Organization!
  keys: [ScreenKey!]
  slides: [Slide!]
  viewerRole: Role!
}

type ScreenKey {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  privateKey: String
  screen: Screen!
  user: User!
}

input ScreenKeyInput {
  screenId: Int!
  publicKey: String!
  privateKey: String!
}

type Slide {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  durationSeconds: Int!
  transition: JSON
  time: JSON
  date: JSON
  weekdays: JSON
  appInstance: AppInstance
}

input SlideInput {
  id: Int
  isActive: Boolean!
  durationSeconds: Int!
  transition: JSON
  time: JSON
  date: JSON
  weekdays: JSON!
  appInstanceId: Int
}

type Storage {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  usedKilobytes: Int!
  maxKilobytes: Int!
  user: User!
}

type TokenResponse {
  tokenType: String!
  accessToken: String!
  expiresIn: Int!
}

input UpdateAppInstanceInput {
  title: String
  appVersion: String
  config: String
}

input UpdateFileInput {
  title: String
}

input UpdateOrganizationInput {
  title: String!
}

input UpdateRoleInput {
  permissionType: PermissionType
}

input UpdateScreenInput {
  title: String
  isActive: Boolean
  color: String
  ratio: String
  slidesOrder: JSON
  organizationId: Int
  slides: [SlideInput!]
}

input UpdateSlideInput {
  isActive: Boolean
  durationSeconds: Int
  transition: JSON
  time: JSON
  date: JSON
  weekdays: JSON
  appInstanceId: Int
}

input UpdateUserInput {
  email: String
  oldPassword: String
  password: String
  firstName: String
  lastName: String
}

"""File upload scalar type"""
scalar Upload

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstName: String!
  lastName: String!
  rulesAcceptedAt: DateTime!
  storage: Storage!
  roles: [Role!]
  files: [File!]
  appsInstances: [AppInstance!]
}
